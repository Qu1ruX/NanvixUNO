<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="klib_8h" kind="file" language="C++">
    <compoundname>klib.h</compoundname>
    <innerclass refid="structkbuffer" prot="public">kbuffer</innerclass>
      <sectiondef kind="user-defined">
      <header>Bitmap Functions</header>
      <memberdef kind="function" id="klib_8h_1a2b64976de3a1868972fcd49fca351777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN <ref refid="klib_8h_1a0164fa8884f20b6ddf102067090a82db" kindref="member">bit_t</ref></type>
        <definition>EXTERN bit_t bitmap_first_free</definition>
        <argsstring>(uint32_t *, size_t)</argsstring>
        <name>bitmap_first_free</name>
        <param>
          <type>uint32_t *</type>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <defname>size</defname>
        </param>
        <briefdescription>
<para>Searches for the first free bit in a bitmap. </para>        </briefdescription>
        <detaileddescription>
<para>Searches for the first free bit in a bitmap. In order to speedup computation, bits are checked in chunks of 4 bytes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap to be searched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size (in bytes) of the bitmap.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If a free bit is found, the number of that bit is returned. However, if no free bit is found #BITMAP_FULL is returned instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="82" column="1" bodyfile="src/kernel/lib/bitmap.c" bodystart="89" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1acf93fb1df199ba81a760bd836a0733e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN unsigned</type>
        <definition>EXTERN unsigned bitmap_nclear</definition>
        <argsstring>(uint32_t *, size_t)</argsstring>
        <name>bitmap_nclear</name>
        <param>
          <type>uint32_t *</type>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <defname>size</defname>
        </param>
        <briefdescription>
<para>Returns the number of bits that are cleared in a bitmap. </para>        </briefdescription>
        <detaileddescription>
<para>Counts the number of bits that are cleared in a bitmap using a bit-hacking algorithm from Stanford.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap to be searched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size (in bytes) of the bitmap.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bits that are cleared in the bitmap. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="83" column="1" bodyfile="src/kernel/lib/bitmap.c" bodystart="72" bodyend="75"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>String Functions</header>
      <memberdef kind="function" id="klib_8h_1a6441e5bbc8c0d26c4f3f90d8a48e3ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN int</type>
        <definition>EXTERN int kstrcmp</definition>
        <argsstring>(const char *, const char *)</argsstring>
        <name>kstrcmp</name>
        <param>
          <type>const char *</type>
          <defname>str1</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>str2</defname>
        </param>
        <briefdescription>
<para>Compares two strings. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>String one. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>String two.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the strings are equal, and non-zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="180" column="1" bodyfile="src/kernel/lib/kstrcmp.c" bodystart="30" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a2b3bcc6f2f8df6748575bc01062ba89b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN int</type>
        <definition>EXTERN int kstrncmp</definition>
        <argsstring>(const char *, const char *, size_t)</argsstring>
        <name>kstrncmp</name>
        <param>
          <type>const char *</type>
          <defname>str1</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>str2</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Compares part of two strings. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>String one. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>String two. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of characters to be compared.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the strings are equal, and non-zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="181" column="1" bodyfile="src/kernel/lib/kstrncmp.c" bodystart="32" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a0a26f1c7b8e75377dbc56fd377894a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN char *</type>
        <definition>EXTERN char* kstrcpy</definition>
        <argsstring>(char *, const char *)</argsstring>
        <name>kstrcpy</name>
        <param>
          <type>char *</type>
          <defname>dest</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>src</defname>
        </param>
        <briefdescription>
<para>Copies a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the target string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="182" column="1" bodyfile="src/kernel/lib/kstrcpy.c" bodystart="30" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1ab42f34a850c6ef2d734b87bdbc247820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN char *</type>
        <definition>EXTERN char* kstrncpy</definition>
        <argsstring>(char *, const char *, size_t)</argsstring>
        <name>kstrncpy</name>
        <param>
          <type>char *</type>
          <defname>str1</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>str2</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Copies part of a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>Source string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of characters to be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the target string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="183" column="1" bodyfile="src/kernel/lib/kstrncpy.c" bodystart="32" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a01f81c3ef0dfdc62c0dc58a1ba0d066d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN <ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
        <definition>EXTERN size_t kstrlen</definition>
        <argsstring>(const char *)</argsstring>
        <name>kstrlen</name>
        <param>
          <type>const char *</type>
          <defname>str</defname>
        </param>
        <briefdescription>
<para>Returns the length of a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be evaluated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="184" column="1" bodyfile="src/kernel/lib/kstrlen.c" bodystart="31" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Memory Functions</header>
      <memberdef kind="function" id="klib_8h_1afb452e399304dfd9e788dd888fc5e4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void *</type>
        <definition>EXTERN void* kmemcpy</definition>
        <argsstring>(void *, const void *, size_t)</argsstring>
        <name>kmemcpy</name>
        <param>
          <type>void *</type>
          <defname>dest</defname>
        </param>
        <param>
          <type>const void *</type>
          <defname>src</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Copy bytes in memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Target memory area. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source memory area. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the target memory area. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="195" column="1" bodyfile="src/kernel/lib/kmemcpy.c" bodystart="32" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void *</type>
        <definition>EXTERN void* kmemset</definition>
        <argsstring>(void *, int, size_t)</argsstring>
        <name>kmemset</name>
        <param>
          <type>void *</type>
          <defname>ptr</defname>
        </param>
        <param>
          <type>int</type>
          <defname>c</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Sets bytes in memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to target memory area. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be set.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the target memory area. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="196" column="1" bodyfile="src/kernel/lib/kmemset.c" bodystart="32" bodyend="43"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Formated Output Functions</header>
      <memberdef kind="function" id="klib_8h_1a6c60698617bd89d57517a59929822205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN int</type>
        <definition>EXTERN int kvsprintf</definition>
        <argsstring>(char *, const char *, va_list)</argsstring>
        <name>kvsprintf</name>
        <param>
          <type>char *</type>
          <defname>str</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>fmt</defname>
        </param>
        <param>
          <type>va_list</type>
          <defname>args</defname>
        </param>
        <briefdescription>
<para>Writes formatted data from variable argument list to a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Output string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Formated string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments list.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the output string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="233" column="1" bodyfile="src/kernel/lib/kvsprintf.c" bodystart="84" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a86924981d2ce00ec851a07cc16daf701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC int</type>
        <definition>PUBLIC int itoa</definition>
        <argsstring>(char *str, unsigned num, int base)</argsstring>
        <name>itoa</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Converts an integer to a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Output string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be converted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Base to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the output string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="234" column="1" bodyfile="src/kernel/lib/kvsprintf.c" bodystart="32" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a7be1fb23544d5d29491bd67dc46b4713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void chkout</definition>
        <argsstring>(dev_t)</argsstring>
        <name>chkout</name>
        <param>
          <type>dev_t</type>
          <defname>dev</defname>
        </param>
        <briefdescription>
<para>Changes kernel&apos;s output device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>New output device. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="235" column="1" bodyfile="src/kernel/lib/kprintf.c" bodystart="37" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1aaa663a13f0d3c7289b139360848772c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void kprintf</definition>
        <argsstring>(const char *,...)</argsstring>
        <name>kprintf</name>
        <param>
          <type>const char *</type>
          <defname>fmt</defname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Writes on the screen a formated string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Formated string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="236" column="1" bodyfile="src/kernel/lib/kprintf.c" bodystart="91" bodyend="108"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Logging and Debugging Functions</header>
      <memberdef kind="function" id="klib_8h_1a8a32d40027487b844f5065e5c7eda3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN ssize_t</type>
        <definition>EXTERN ssize_t klog_read</definition>
        <argsstring>(unsigned, char *, size_t)</argsstring>
        <name>klog_read</name>
        <param>
          <type>unsigned</type>
          <defname>minor</defname>
        </param>
        <param>
          <type>char *</type>
          <defname>buffer</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Reads from kernel log. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the kernel log should be read to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of characters to read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters actually read from the kernel log. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="270" column="1" bodyfile="src/kernel/dev/klog/klog.c" bodystart="185" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a652fe5de6cb7726a3b287e923a4fb4e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN ssize_t</type>
        <definition>EXTERN ssize_t klog_write</definition>
        <argsstring>(unsigned, const char *, size_t)</argsstring>
        <name>klog_write</name>
        <param>
          <type>unsigned</type>
          <defname>minor</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>buffer</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Writes to kernel log. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to be written in the kernel log. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of characters to be written in the kernel log.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters actually written to the kernel log. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="271" column="1" bodyfile="src/kernel/dev/klog/klog.c" bodystart="136" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a04d9437f531c5286968b3fd38bb990cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void kpanic</definition>
        <argsstring>(const char *,...)</argsstring>
        <name>kpanic</name>
        <param>
          <type>const char *</type>
          <defname>fmt</defname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Writes a message to the kernel&apos;s output device and panics the kernel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Formatted message to be written onto kernel&apos;s output device. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="272" column="1" bodyfile="src/kernel/lib/kpanic.c" bodystart="31" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a95160f6ca5e1c9035981777097d7bfd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void kmemdump</definition>
        <argsstring>(const void *s, size_t n)</argsstring>
        <name>kmemdump</name>
        <param>
          <type>const void *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Dumps the contents of a memory area. </para>        </briefdescription>
        <detaileddescription>
<para>Dumps the contents of the memory area pointed to by <computeroutput>s</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Target memory area. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to dump. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="273" column="1" bodyfile="src/kernel/lib/kmemdump.c" bodystart="32" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1aa0a8ab7bb483cd1799429106931c58df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN const char *</type>
        <definition>EXTERN const char* skip_code</definition>
        <argsstring>(const char *buffer, int *i)</argsstring>
        <name>skip_code</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Skip log_level from a buffer and update it&apos;s size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Buffer without log_level code at the beginning </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="274" column="1" bodyfile="src/kernel/lib/kprintf.c" bodystart="55" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1a8131eaf6b625c183616dfe9c0f29c7fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN char</type>
        <definition>EXTERN char get_code</definition>
        <argsstring>(const char *buffer)</argsstring>
        <name>get_code</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Get log_level from a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>log_level or 0 if default log_level </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="275" column="1" bodyfile="src/kernel/lib/kprintf.c" bodystart="70" bodyend="84"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Random Functions</header>
      <memberdef kind="function" id="klib_8h_1af02cc13021ec8ce8dc99ece507afefa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN int</type>
        <definition>EXTERN int krand</definition>
        <argsstring>(void)</argsstring>
        <name>krand</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Generates a pseudo-random number. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pseudo-random integer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="297" column="1" bodyfile="src/kernel/lib/krand.c" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="klib_8h_1ab6f3de35e30827e4e66d326b5f061414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void ksrand</definition>
        <argsstring>(unsigned)</argsstring>
        <name>ksrand</name>
        <param>
          <type>unsigned</type>
          <defname>seed</defname>
        </param>
        <briefdescription>
<para>Sets seed value for pseudo-random number generator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Pseudo-random number sequence&apos;s seed value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="298" column="1" bodyfile="src/kernel/lib/ksrand.c" bodystart="38" bodyend="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="klib_8h_1a0164fa8884f20b6ddf102067090a82db" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t bit_t</definition>
        <argsstring></argsstring>
        <name>bit_t</name>
        <briefdescription>
<para>Bit number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="45" column="1" bodyfile="include/nanvix/klib.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="klib_8h_1a68c3158097131023d80c53cd8f983367" prot="public" static="no" mutable="no">
        <type>EXTERN dev_t</type>
        <definition>EXTERN dev_t kout</definition>
        <argsstring></argsstring>
        <name>kout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/nanvix/klib.h" line="227" column="1" bodyfile="include/nanvix/klib.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Kernel Library. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright(C)<sp/>2011-2017<sp/>Pedro<sp/>H.<sp/>Penna<sp/>&lt;pedrohenriquepenna@gmail.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2017-2017<sp/>Clement<sp/>Rouquier<sp/>&lt;clementrouquier@gmail.com&gt;Joe<sp/>Perches<sp/>&lt;joe@perches.com&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2012-2016<sp/>Linus<sp/>Torvalds<sp/>&lt;torvalds@linux-foundation.org&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2012-2012<sp/>Kay<sp/>Sievers<sp/>&lt;kay.sievers@vrfy.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Nanvix.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>Nanvix.<sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor">#ifndef<sp/>NANVIX_KLIB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NANVIX_KLIB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="const_8h" kindref="compound">nanvix/const.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="pm_8h" kindref="compound">nanvix/pm.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*========================================================================*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bitmap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="klib_8h_1a0164fa8884f20b6ddf102067090a82db" kindref="member">bit_t</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>BITMAP_FULL<sp/>0xffffffff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>IDX(a)<sp/>((a)<sp/>&gt;&gt;<sp/>5)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>OFF(a)<sp/>((a)<sp/>&amp;<sp/>0x1F)<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>bitmap_set(bitmap,<sp/>pos)<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t<sp/>*)(bitmap))[IDX(pos)]<sp/>|=<sp/>(0x1<sp/>&lt;&lt;<sp/>OFF(pos)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>bitmap_clear(bitmap,<sp/>pos)<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t<sp/>*)(bitmap))[IDX(pos)]<sp/>&amp;=<sp/>~(0x1<sp/>&lt;&lt;<sp/>OFF(pos)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/><ref refid="klib_8h_1a0164fa8884f20b6ddf102067090a82db" kindref="member">bit_t</ref><sp/><ref refid="klib_8h_1a2b64976de3a1868972fcd49fca351777" kindref="member">bitmap_first_free</ref>(uint32_t<sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1acf93fb1df199ba81a760bd836a0733e0" kindref="member">bitmap_nclear</ref>(uint32_t<sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*========================================================================*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KBUFFER_SIZE<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100" refid="structkbuffer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structkbuffer" kindref="compound">kbuffer</ref></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structkbuffer_1a91cfbc72f8e908b3f74d64c9f63055b0" kindref="member">head</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structkbuffer_1a6d861c9c8a95cb2b69b65cb7c482f6af" kindref="member">tail</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>[KBUFFER_SIZE];<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structprocess" kindref="compound">process</ref><sp/>*<ref refid="structkbuffer_1a6e44a17eef6d95b2e6832c26e469d505" kindref="member">chain</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KBUFFER_FULL(b)<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((b).tail<sp/>+<sp/>1)&amp;(KBUFFER_SIZE<sp/>-<sp/>1))<sp/>==<sp/>(b).head)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KBUFFER_EMPTY(b)<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((b).head<sp/>==<sp/>(b).tail)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KBUFFER_PUT(b,<sp/>ch)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b).buffer[(b).tail]<sp/>=<sp/>(ch);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b).tail<sp/>=<sp/>(((b).tail<sp/>+<sp/>1)&amp;(KBUFFER_SIZE<sp/>-<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KBUFFER_GET(b,<sp/>ch)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ch)<sp/>=<sp/>(b).buffer[b.head];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b).head<sp/>=<sp/>(((b).head<sp/>+<sp/>1)&amp;(KBUFFER_SIZE<sp/>-<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KBUFFER_INIT(b)<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b).head<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b).tail<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b).chain<sp/>=<sp/>NULL;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KBUFFER_TAKEOUT(b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b).tail<sp/>=<sp/>(((b).tail<sp/>-<sp/>1)&amp;(KBUFFER_SIZE<sp/>-<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*========================================================================*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strings<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a6441e5bbc8c0d26c4f3f90d8a48e3ffb" kindref="member">kstrcmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a2b3bcc6f2f8df6748575bc01062ba89b" kindref="member">kstrncmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="klib_8h_1a0a26f1c7b8e75377dbc56fd377894a73" kindref="member">kstrcpy</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="klib_8h_1ab42f34a850c6ef2d734b87bdbc247820" kindref="member">kstrncpy</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a01f81c3ef0dfdc62c0dc58a1ba0d066d" kindref="member">kstrlen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*========================================================================*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="klib_8h_1afb452e399304dfd9e788dd888fc5e4de" kindref="member">kmemcpy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" kindref="member">kmemset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ALIGN(x,<sp/>a)<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>+<sp/>((a)<sp/>-<sp/>1))<sp/>&amp;<sp/>~((a)<sp/>-<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CHKSIZE(a,<sp/>b)<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((void)sizeof(char[(((a)<sp/>==<sp/>(b))<sp/>?<sp/>1<sp/>:<sp/>-1)]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*========================================================================*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formatted<sp/>output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Forward<sp/>definitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/>dev_t<sp/>kout;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a6c60698617bd89d57517a59929822205" kindref="member">kvsprintf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>va_list);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>PUBLIC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a86924981d2ce00ec851a07cc16daf701" kindref="member">itoa</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a7be1fb23544d5d29491bd67dc46b4713" kindref="member">chkout</ref>(dev_t);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1aaa663a13f0d3c7289b139360848772c0" kindref="member">kprintf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*========================================================================*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging<sp/>and<sp/>debugging<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>char<sp/>declares<sp/>that<sp/>following<sp/>one<sp/>is<sp/>a<sp/>log<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_SOH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\001&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_SOH_ASCII<sp/><sp/>&apos;\001&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Log<sp/>levels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_EMERG<sp/><sp/><sp/><sp/><sp/><sp/>KERN_SOH<sp/>&quot;0&quot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>system<sp/>is<sp/>unusable<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_ALERT<sp/><sp/><sp/><sp/><sp/><sp/>KERN_SOH<sp/>&quot;1&quot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>action<sp/>must<sp/>be<sp/>taken<sp/>immediately<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_CRIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>KERN_SOH<sp/>&quot;2&quot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>critical<sp/>conditions<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_ERR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KERN_SOH<sp/>&quot;3&quot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>conditions<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_WARNING<sp/><sp/><sp/><sp/>KERN_SOH<sp/>&quot;4&quot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>warning<sp/>conditions<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_NOTICE<sp/><sp/><sp/><sp/><sp/>KERN_SOH<sp/>&quot;5&quot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>normal<sp/>but<sp/>significant<sp/>condition<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>KERN_SOH<sp/>&quot;6&quot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>informational<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KERN_DEBUG<sp/><sp/><sp/><sp/><sp/><sp/>KERN_SOH<sp/>&quot;7&quot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>debug-level<sp/>messages<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>default<sp/>log<sp/>level<sp/>is<sp/>no<sp/>log<sp/>level,<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useful<sp/>to<sp/>avoid<sp/>printing<sp/>log<sp/>level<sp/>in<sp/>early<sp/>boot<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KLOG_SIZE<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/>ssize_t<sp/><ref refid="klib_8h_1a8a32d40027487b844f5065e5c7eda3c6" kindref="member">klog_read</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/>ssize_t<sp/><ref refid="klib_8h_1a652fe5de6cb7726a3b287e923a4fb4e4" kindref="member">klog_write</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a04d9437f531c5286968b3fd38bb990cd" kindref="member">kpanic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a95160f6ca5e1c9035981777097d7bfd3" kindref="member">kmemdump</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="klib_8h_1aa0a8ab7bb483cd1799429106931c58df" kindref="member">skip_code</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*i);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1a8131eaf6b625c183616dfe9c0f29c7fd" kindref="member">get_code</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*========================================================================*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>UNUSED(a)<sp/>((void)a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>noop()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1af02cc13021ec8ce8dc99ece507afefa8" kindref="member">krand</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="klib_8h_1ab6f3de35e30827e4e66d326b5f061414" kindref="member">ksrand</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NANVIX_KLIB_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/nanvix/klib.h"/>
  </compounddef>
</doxygen>
