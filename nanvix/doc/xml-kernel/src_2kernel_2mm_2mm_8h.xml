<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="src_2kernel_2mm_2mm_8h" kind="file" language="C++">
    <compoundname>mm.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2kernel_2mm_2mm_8h_1aadf3941d593f3e7bb3c7565289e68959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void freeupg</definition>
        <argsstring>(struct pte *)</argsstring>
        <name>freeupg</name>
        <param>
          <type>struct pte *</type>
          <defname>pg</defname>
        </param>
        <briefdescription>
<para>Frees a user page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pg</parametername>
</parameternamelist>
<parameterdescription>
<para>Page to be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/mm.h" line="28" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="504" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="src_2kernel_2mm_2mm_8h_1a0c2fb96b072c4036428f4019eb836d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void linkupg</definition>
        <argsstring>(struct pte *, struct pte *)</argsstring>
        <name>linkupg</name>
        <param>
          <type>struct pte *</type>
          <defname>upg1</defname>
        </param>
        <param>
          <type>struct pte *</type>
          <defname>upg2</defname>
        </param>
        <briefdescription>
<para>Links two pages. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>upg1</parametername>
</parameternamelist>
<parameterdescription>
<para>Source page. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Target page. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/mm.h" line="29" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="564" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="src_2kernel_2mm_2mm_8h_1a3b374f362f5c6a09d5b8357f33b7af49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void mappgtab</definition>
        <argsstring>(struct process *, addr_t, void *)</argsstring>
        <name>mappgtab</name>
        <param>
          <type>struct <ref refid="structprocess" kindref="compound">process</ref> *</type>
          <defname>proc</defname>
        </param>
        <param>
          <type>addr_t</type>
          <defname>addr</defname>
        </param>
        <param>
          <type>void *</type>
          <defname>pgtab</defname>
        </param>
        <briefdescription>
<para>Maps a page table into user address space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process in which the page table should be mapped. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address where the page should be mapped. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgtab</parametername>
</parameternamelist>
<parameterdescription>
<para>Page table to map. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/mm.h" line="30" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="452" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="src_2kernel_2mm_2mm_8h_1a3a2e739ce7c684f5bc2d8b24a2ea6cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void markpg</definition>
        <argsstring>(struct pte *, int)</argsstring>
        <name>markpg</name>
        <param>
          <type>struct pte *</type>
          <defname>pg</defname>
        </param>
        <param>
          <type>int</type>
          <defname>mark</defname>
        </param>
        <briefdescription>
<para>Marks a page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pg</parametername>
</parameternamelist>
<parameterdescription>
<para>Page to be marked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mark</parametername>
</parameternamelist>
<parameterdescription>
<para>Mark. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/mm.h" line="31" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="535" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="src_2kernel_2mm_2mm_8h_1a7316418afe92f13d2ae9832b6a6dff6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void</type>
        <definition>EXTERN void umappgtab</definition>
        <argsstring>(struct process *, addr_t)</argsstring>
        <name>umappgtab</name>
        <param>
          <type>struct <ref refid="structprocess" kindref="compound">process</ref> *</type>
          <defname>proc</defname>
        </param>
        <param>
          <type>addr_t</type>
          <defname>addr</defname>
        </param>
        <briefdescription>
<para>Unmaps a page table from user address space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process in which the page table should be unmapped. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address where the page should be unmapped.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero upon success, and non zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/mm.h" line="32" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="481" bodyend="497"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright(C)<sp/>2011-2016<sp/>Pedro<sp/>H.<sp/>Penna<sp/>&lt;pedrohenriquepenna@gmail.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Nanvix.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>Nanvix.<sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_MM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Page<sp/>marks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PAGE_FILL<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>Demand<sp/>fill.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PAGE_ZERO<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>Demand<sp/>zero.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Forward<sp/>definitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeupg(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linkupg(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mappgtab(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structprocess" kindref="compound">process</ref><sp/>*,<sp/>addr_t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markpg(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>umappgtab(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structprocess" kindref="compound">process</ref><sp/>*,<sp/>addr_t);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_MM_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/kernel/mm/mm.h"/>
  </compounddef>
</doxygen>
