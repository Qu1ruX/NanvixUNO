<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="super_8c" kind="file" language="C++">
    <compoundname>super.c</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__Superblock_1ga281a6f5b736c060816b85ae3c3b1fa19" prot="public" static="no" mutable="no">
        <type>PRIVATE struct <ref refid="structsuperblock" kindref="compound">superblock</ref></type>
        <definition>PRIVATE struct superblock superblocks[NR_SUPERBLOCKS]</definition>
        <argsstring>[NR_SUPERBLOCKS]</argsstring>
        <name>superblocks</name>
        <briefdescription>
<para>Superblock table. </para>        </briefdescription>
        <detaileddescription>
<para>The superblock table holds all information about mounted file systems. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="43" column="1" bodyfile="src/kernel/fs/super.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Superblock_1ga2dd71b0c3b5e554ef7741e78c43d9a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE struct <ref refid="structsuperblock" kindref="compound">superblock</ref> *</type>
        <definition>PRIVATE struct superblock* superblock_empty</definition>
        <argsstring>(void)</argsstring>
        <name>superblock_empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a non-valid superblock from the superblock table. </para>        </briefdescription>
        <detaileddescription>
<para>Searches for a non-valid superblock entry in the superblock table.</para><para><simplesect kind="return"><para>If such superblock has been found, a pointer to it is returned. In this case, the superblock is ensured to be locked. However, if no such block has been found, a NULL pointer is returned instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="54" column="1" bodyfile="src/kernel/fs/super.c" bodystart="54" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1gadb4f935903bd5f08132801b1a908b043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE void</type>
        <definition>PRIVATE void superblock_write</definition>
        <argsstring>(struct superblock *sb)</argsstring>
        <name>superblock_write</name>
        <param>
          <type>struct <ref refid="structsuperblock" kindref="compound">superblock</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
<para>Writes superblock to underlying device. </para>        </briefdescription>
        <detaileddescription>
<para>If the superblock is dirty, writes it to the underlying device. The inode and block maps are also written back.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sb</parametername>
</parameternamelist>
<parameterdescription>
<para>Superblock to be written back to disk.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The superblock must be valid. </para></simplesect>
<simplesect kind="note"><para>The superblock must be locked. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="98" column="1" bodyfile="src/kernel/fs/super.c" bodystart="98" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1ga92964453ed18c8ceeaaf5d3f2d560bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC struct <ref refid="structsuperblock" kindref="compound">superblock</ref> *</type>
        <definition>PUBLIC struct superblock* superblock_get</definition>
        <argsstring>(dev_t dev)</argsstring>
        <name>superblock_get</name>
        <param>
          <type>dev_t</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Gets a superblock that matches a device number. </para>        </briefdescription>
        <detaileddescription>
<para>Searches for a valid superblock in the superblock table which the device number equals the informed one.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device number.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the requested superblock exists in the superblock table, a pointer to it is returned. In this case, the superblock is ensured to be locked. However, if no such superblock exists, a NULL pointer is returned instead.</para></simplesect>
<simplesect kind="note"><para>The device number should be valid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="140" column="1" bodyfile="src/kernel/fs/super.c" bodystart="140" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1ga4ef02b583308d00506b5000837010523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void superblock_lock</definition>
        <argsstring>(struct superblock *sb)</argsstring>
        <name>superblock_lock</name>
        <param>
          <type>struct <ref refid="structsuperblock" kindref="compound">superblock</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
<para>Locks a superblock. </para>        </briefdescription>
        <detaileddescription>
<para>Locks a superblock by marking it as locked. The calling process may block here some time, waiting its turn to acquire the lock.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sb</parametername>
</parameternamelist>
<parameterdescription>
<para>Superblock to be locked.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The superblock must valid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="185" column="1" bodyfile="src/kernel/fs/super.c" bodystart="185" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1gaa1e437c51f1035512ba17835840934e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void superblock_unlock</definition>
        <argsstring>(struct superblock *sb)</argsstring>
        <name>superblock_unlock</name>
        <param>
          <type>struct <ref refid="structsuperblock" kindref="compound">superblock</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
<para>Unlocks a superblock. </para>        </briefdescription>
        <detaileddescription>
<para>Unlocks a superblock by marking it as not locked and waking up all processes that were waiting for it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sb</parametername>
</parameternamelist>
<parameterdescription>
<para>Superblock to be unlocked.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The superblock must be valid. </para></simplesect>
<simplesect kind="note"><para>The superblock must be locked. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="205" column="1" bodyfile="src/kernel/fs/super.c" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1ga60c77faf6a4d5c316eed12ba021bf837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void superblock_put</definition>
        <argsstring>(struct superblock *sb)</argsstring>
        <name>superblock_put</name>
        <param>
          <type>struct <ref refid="structsuperblock" kindref="compound">superblock</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
<para>Releases a superblock. </para>        </briefdescription>
        <detaileddescription>
<para>Releases a superblock. If its reference count drops to zero, all underlying buffers are freed and then the superblock is marked as invalid.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sb</parametername>
</parameternamelist>
<parameterdescription>
<para>Superblock to be released.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The superblock must be valid. </para></simplesect>
<simplesect kind="note"><para>The superblock must be locked. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="223" column="1" bodyfile="src/kernel/fs/super.c" bodystart="223" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1gaf3241b4775bb4293a26a72010487c3e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC struct <ref refid="structsuperblock" kindref="compound">superblock</ref> *</type>
        <definition>PUBLIC struct superblock* superblock_read</definition>
        <argsstring>(dev_t dev)</argsstring>
        <name>superblock_read</name>
        <param>
          <type>dev_t</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Reads a superblock from a device. </para>        </briefdescription>
        <detaileddescription>
<para>Reads a superblock from the first block of a device. Once the read has completed, the magic number of the block is asserted and in-core fields are filled.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device number.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion, a pointer to the in-core superblock is returned. The superblock is ensured to be locked in this case. Upon failure, a NULL pointer is returned instead.</para></simplesect>
<simplesect kind="note"><para>The device number should be valid.</para></simplesect>
<xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>Check for read error on <ref refid="group__Buffer_1ga29b2bc5da947fe8b2363ad2879447d93" kindref="member">bread()</ref>. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="268" column="1" bodyfile="src/kernel/fs/super.c" bodystart="268" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1ga11746988cc13e340fe34981d65fe6078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void superblock_sync</definition>
        <argsstring>(void)</argsstring>
        <name>superblock_sync</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Synchronizes the superblock table. </para>        </briefdescription>
        <detaileddescription>
<para>Synchronizes the superblock table by flushing all valid super blocks onto underlying devices. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="336" column="1" bodyfile="src/kernel/fs/super.c" bodystart="336" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1gaad74db1f397342f785ea20b10c745b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void superblock_stat</definition>
        <argsstring>(struct superblock *sb, struct ustat *ubuf)</argsstring>
        <name>superblock_stat</name>
        <param>
          <type>struct <ref refid="structsuperblock" kindref="compound">superblock</ref> *</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>struct ustat *</type>
          <declname>ubuf</declname>
        </param>
        <briefdescription>
<para>Gets file system statistics. </para>        </briefdescription>
        <detaileddescription>
<para>Gets file system statics from the superblock of the file system pointed to by sb, and stores information in the buffer pointed to by ubuf.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sb</parametername>
</parameternamelist>
<parameterdescription>
<para>Superblock of the file system to be inspected. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ubuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Place where statics should be stored.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The superblock must be valid. </para></simplesect>
<simplesect kind="note"><para>The superblock must be locked. </para></simplesect>
<simplesect kind="note"><para>The buffer must be valid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="367" column="1" bodyfile="src/kernel/fs/super.c" bodystart="367" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group__Superblock_1ga226f283e88ec0b9f2d85a60ae83a4fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void superblock_init</definition>
        <argsstring>(void)</argsstring>
        <name>superblock_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes the superblock table. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes the superblock table by setting all superblocks in it the table to be invalid and unlocked.</para><para><simplesect kind="note"><para>This function shall be called just once. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/fs/super.c" line="406" column="1" bodyfile="src/kernel/fs/super.c" bodystart="406" bodyend="417"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Superblock module implementation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright(C)<sp/>2011-2016<sp/>Pedro<sp/>H.<sp/>Penna<sp/>&lt;pedrohenriquepenna@gmail.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Nanvix.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>Nanvix.<sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="const_8h" kindref="compound">nanvix/const.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="klib_8h" kindref="compound">nanvix/klib.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2nanvix_2fs_8h" kindref="compound">nanvix/fs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ustat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/><ref refid="group__Superblock_1ga281a6f5b736c060816b85ae3c3b1fa19" kindref="member">superblocks</ref>[NR_SUPERBLOCKS];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*<ref refid="group__Superblock_1ga2dd71b0c3b5e554ef7741e78c43d9a7c" kindref="member">superblock_empty</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">again:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>empty<sp/>superblock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>&amp;<ref refid="group__Superblock_1ga281a6f5b736c060816b85ae3c3b1fa19" kindref="member">superblocks</ref>[0];<sp/>sb<sp/>&lt;<sp/>&amp;<ref refid="group__Superblock_1ga281a6f5b736c060816b85ae3c3b1fa19" kindref="member">superblocks</ref>[NR_SUPERBLOCKS];<sp/>sb++)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>valid<sp/>superblocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47ba4448f5ef0de85517b294d75f2895c177" kindref="member">SUPERBLOCK_VALID</ref>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Superblock<sp/>is<sp/>locked,<sp/>so<sp/>we<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wait<sp/>for<sp/>it<sp/>to<sp/>become<sp/>free.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bafbb91ce9ba0ed958e3a1f915e0e5f69c" kindref="member">SUPERBLOCK_LOCKED</ref>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pm_8h_1a8c4dedf40a191460646b9c8485630586" kindref="member">sleep</ref>(&amp;sb-&gt;<ref refid="structsuperblock_1a6e44a17eef6d95b2e6832c26e469d505" kindref="member">chain</ref>,<sp/>PRIO_SUPERBLOCK);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>again;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1ga4ef02b583308d00506b5000837010523" kindref="member">superblock_lock</ref>(sb);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sb);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Superblock<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1aaa663a13f0d3c7289b139360848772c0" kindref="member">kprintf</ref>(</highlight><highlight class="stringliteral">&quot;fs:<sp/>superblock<sp/>table<sp/>overflow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(NULL);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Superblock_1gadb4f935903bd5f08132801b1a908b043" kindref="member">superblock_write</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>to<sp/>be<sp/>done.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bac3e4f8bf48565fc230656ff10457a5fa" kindref="member">SUPERBLOCK_DIRTY</ref>))</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>inode<sp/>map<sp/>buffers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sb-&gt;<ref refid="structsuperblock_1ab5e85a03949f20bbaee32cac42a83a4b" kindref="member">imap_blocks</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a2913dc8576a928e424368ac0e3643db3" kindref="member">imap</ref>[i]-&gt;<ref refid="structbuffer_1a6a9e89d63eb610dfe238b0a840979421" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bwrite(sb-&gt;<ref refid="structsuperblock_1a2913dc8576a928e424368ac0e3643db3" kindref="member">imap</ref>[i]);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>zone<sp/>map<sp/>buffers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sb-&gt;<ref refid="structsuperblock_1abb42d1cb8207c76e12f36d7f933847b7" kindref="member">zmap_blocks</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1ab5eff66b558c0b780d2aa1f7fc4b7b47" kindref="member">zmap</ref>[i]-&gt;<ref refid="structbuffer_1a6a9e89d63eb610dfe238b0a840979421" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bwrite(sb-&gt;<ref refid="structsuperblock_1ab5eff66b558c0b780d2aa1f7fc4b7b47" kindref="member">zmap</ref>[i]);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>superblock<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a103343dc452e5f0e8e525f446f012fee" kindref="member">buf</ref>-&gt;<ref refid="structbuffer_1a6a9e89d63eb610dfe238b0a840979421" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>bwrite(sb-&gt;<ref refid="structsuperblock_1a103343dc452e5f0e8e525f446f012fee" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;=<sp/>~<ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bac3e4f8bf48565fc230656ff10457a5fa" kindref="member">SUPERBLOCK_DIRTY</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*<ref refid="group__Superblock_1ga92964453ed18c8ceeaaf5d3f2d560bca" kindref="member">superblock_get</ref>(dev_t<sp/><ref refid="structsuperblock_1a8910285a0352a5c710e65ec9ecbe32a1" kindref="member">dev</ref>)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">again:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>for<sp/>superblock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>&amp;superblocks[0];<sp/>sb<sp/>&lt;<sp/>&amp;superblocks[NR_SUPERBLOCKS];<sp/>sb++)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>invalid<sp/>superblocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47ba4448f5ef0de85517b294d75f2895c177" kindref="member">SUPERBLOCK_VALID</ref>))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structsuperblock_1a8910285a0352a5c710e65ec9ecbe32a1" kindref="member">dev</ref><sp/>==<sp/>dev)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Superblock<sp/>is<sp/>locked,<sp/>so<sp/>we<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wait<sp/>for<sp/>it<sp/>to<sp/>become<sp/>free.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bafbb91ce9ba0ed958e3a1f915e0e5f69c" kindref="member">SUPERBLOCK_LOCKED</ref>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pm_8h_1a8c4dedf40a191460646b9c8485630586" kindref="member">sleep</ref>(&amp;sb-&gt;<ref refid="structsuperblock_1a6e44a17eef6d95b2e6832c26e469d505" kindref="member">chain</ref>,<sp/>PRIO_SUPERBLOCK);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>again;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1ga4ef02b583308d00506b5000837010523" kindref="member">superblock_lock</ref>(sb);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a6a9e89d63eb610dfe238b0a840979421" kindref="member">count</ref>++;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sb);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(NULL);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Superblock_1ga4ef02b583308d00506b5000837010523" kindref="member">superblock_lock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Waits<sp/>for<sp/>superblock<sp/>to<sp/>become<sp/>unlocked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bafbb91ce9ba0ed958e3a1f915e0e5f69c" kindref="member">SUPERBLOCK_LOCKED</ref>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pm_8h_1a8c4dedf40a191460646b9c8485630586" kindref="member">sleep</ref>(&amp;sb-&gt;<ref refid="structsuperblock_1a6e44a17eef6d95b2e6832c26e469d505" kindref="member">chain</ref>,<sp/>PRIO_SUPERBLOCK);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>|=<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bafbb91ce9ba0ed958e3a1f915e0e5f69c" kindref="member">SUPERBLOCK_LOCKED</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Superblock_1gaa1e437c51f1035512ba17835840934e5" kindref="member">superblock_unlock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pm_8h_1a17553686b616b68f1b306ae7cb5261ec" kindref="member">wakeup</ref>(&amp;sb-&gt;<ref refid="structsuperblock_1a6e44a17eef6d95b2e6832c26e469d505" kindref="member">chain</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;=<sp/>~<ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bafbb91ce9ba0ed958e3a1f915e0e5f69c" kindref="member">SUPERBLOCK_LOCKED</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Superblock_1ga60c77faf6a4d5c316eed12ba021bf837" kindref="member">superblock_put</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Double<sp/>free.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structsuperblock_1a6a9e89d63eb610dfe238b0a840979421" kindref="member">count</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1a04d9437f531c5286968b3fd38bb990cd" kindref="member">kpanic</ref>(</highlight><highlight class="stringliteral">&quot;freeing<sp/>superblock<sp/>twice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>underlying<sp/>resources.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--sb-&gt;<ref refid="structsuperblock_1a6a9e89d63eb610dfe238b0a840979421" kindref="member">count</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1gadb4f935903bd5f08132801b1a908b043" kindref="member">superblock_write</ref>(sb);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>inode<sp/>map<sp/>buffers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sb-&gt;<ref refid="structsuperblock_1ab5e85a03949f20bbaee32cac42a83a4b" kindref="member">imap_blocks</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brelse(sb-&gt;<ref refid="structsuperblock_1a2913dc8576a928e424368ac0e3643db3" kindref="member">imap</ref>[i]);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>zone<sp/>map<sp/>buffers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sb-&gt;<ref refid="structsuperblock_1abb42d1cb8207c76e12f36d7f933847b7" kindref="member">zmap_blocks</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brelse(sb-&gt;<ref refid="structsuperblock_1ab5eff66b558c0b780d2aa1f7fc4b7b47" kindref="member">zmap</ref>[i]);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>superblock<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brelse(sb-&gt;<ref refid="structsuperblock_1a103343dc452e5f0e8e525f446f012fee" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;=<sp/>~<ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47ba4448f5ef0de85517b294d75f2895c177" kindref="member">SUPERBLOCK_VALID</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1gaa1e437c51f1035512ba17835840934e5" kindref="member">superblock_unlock</ref>(sb);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*<ref refid="group__Superblock_1gaf3241b4775bb4293a26a72010487c3e7" kindref="member">superblock_read</ref>(dev_t<sp/>dev)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbuffer" kindref="compound">buffer</ref><sp/>*buf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffer<sp/>disk<sp/>superblock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In-core<sp/>superblock.<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structd__superblock" kindref="compound">d_superblock</ref><sp/>*d_sb;<sp/></highlight><highlight class="comment">/*<sp/>Disk<sp/>superblock.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>empty<sp/>superblock.<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>sb<sp/>=<sp/><ref refid="group__Superblock_1ga2dd71b0c3b5e554ef7741e78c43d9a7c" kindref="member">superblock_empty</ref>();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>superblock<sp/>from<sp/>device.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/><ref refid="group__Buffer_1ga29b2bc5da947fe8b2363ad2879447d93" kindref="member">bread</ref>(dev,<sp/>1);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>d_sb<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structd__superblock" kindref="compound">d_superblock</ref><sp/>*)buf-&gt;<ref refid="structbuffer_1a735984d41155bc1032e09bece8f8d66d" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bad<sp/>magic<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(d_sb-&gt;<ref refid="structd__superblock_1a3e415727e4367b02c2621266a66f0b48" kindref="member">s_magic</ref><sp/>!=<sp/>SUPER_MAGIC)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1aaa663a13f0d3c7289b139360848772c0" kindref="member">kprintf</ref>(</highlight><highlight class="stringliteral">&quot;fs:<sp/>bad<sp/>superblock<sp/>magic<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Too<sp/>many<sp/>blocks<sp/>in<sp/>the<sp/>inode/zone<sp/>map.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((d_sb-&gt;<ref refid="structd__superblock_1a8c2d1d3051e94e4ae7854640ed5c5cc1" kindref="member">s_imap_nblocks</ref><sp/>&gt;<sp/>IMAP_SIZE)||(d_sb-&gt;<ref refid="structd__superblock_1a002923c6630117824fe08cb717cfda62" kindref="member">s_bmap_nblocks</ref><sp/>&gt;<sp/>ZMAP_SIZE))</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1aaa663a13f0d3c7289b139360848772c0" kindref="member">kprintf</ref>(</highlight><highlight class="stringliteral">&quot;fs:<sp/>too<sp/>many<sp/>blocks<sp/>in<sp/>the<sp/>inode/zone<sp/>map&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>superblock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a103343dc452e5f0e8e525f446f012fee" kindref="member">buf</ref><sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a93504876b72e69f07871772eb128e3d1" kindref="member">ninodes</ref><sp/>=<sp/>d_sb-&gt;<ref refid="structd__superblock_1aee8af3dce980e540626f6c017361d2d6" kindref="member">s_ninodes</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1ab5e85a03949f20bbaee32cac42a83a4b" kindref="member">imap_blocks</ref><sp/>=<sp/>d_sb-&gt;<ref refid="structd__superblock_1a8c2d1d3051e94e4ae7854640ed5c5cc1" kindref="member">s_imap_nblocks</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sb-&gt;<ref refid="structsuperblock_1ab5e85a03949f20bbaee32cac42a83a4b" kindref="member">imap_blocks</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkunlock(sb-&gt;<ref refid="structsuperblock_1a2913dc8576a928e424368ac0e3643db3" kindref="member">imap</ref>[i]<sp/>=<sp/><ref refid="group__Buffer_1ga29b2bc5da947fe8b2363ad2879447d93" kindref="member">bread</ref>(dev,<sp/>2<sp/>+<sp/>i));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1abb42d1cb8207c76e12f36d7f933847b7" kindref="member">zmap_blocks</ref><sp/>=<sp/>d_sb-&gt;<ref refid="structd__superblock_1a002923c6630117824fe08cb717cfda62" kindref="member">s_bmap_nblocks</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sb-&gt;<ref refid="structsuperblock_1abb42d1cb8207c76e12f36d7f933847b7" kindref="member">zmap_blocks</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkunlock(sb-&gt;<ref refid="structsuperblock_1ab5eff66b558c0b780d2aa1f7fc4b7b47" kindref="member">zmap</ref>[i]<sp/>=<sp/><ref refid="group__Buffer_1ga29b2bc5da947fe8b2363ad2879447d93" kindref="member">bread</ref>(dev,<sp/>2<sp/>+<sp/>sb-&gt;<ref refid="structsuperblock_1ab5e85a03949f20bbaee32cac42a83a4b" kindref="member">imap_blocks</ref><sp/>+<sp/>i));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a6720b56ef0bb6703ba9a22b1e90cd1ed" kindref="member">first_data_block</ref><sp/>=<sp/>d_sb-&gt;<ref refid="structd__superblock_1a4cf84c0911631c9f5063a53e33b09877" kindref="member">s_first_data_block</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1ae076ec1b6fab67b323ce59bb39919f03" kindref="member">max_size</ref><sp/>=<sp/>d_sb-&gt;<ref refid="structd__superblock_1af87c2fcc88e238c09e6de4807346508e" kindref="member">s_max_size</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a14ce7590e799f6386999379b28ca167b" kindref="member">zones</ref><sp/>=<sp/>d_sb-&gt;<ref refid="structd__superblock_1a0c295a1b137af3985471e37e58e7cda3" kindref="member">s_nblocks</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1afc8b220c6e92f5fcc41dee7e75501a1b" kindref="member">root</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1ac7d627a4346b2e56650db38ba268c242" kindref="member">mp</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a8910285a0352a5c710e65ec9ecbe32a1" kindref="member">dev</ref><sp/>=<sp/>dev;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;=<sp/>~(<ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bac3e4f8bf48565fc230656ff10457a5fa" kindref="member">SUPERBLOCK_DIRTY</ref><sp/>|<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47ba4ae9160bb98725e2aee4238ffe530345" kindref="member">SUPERBLOCK_RDONLY</ref>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>|=<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47ba4448f5ef0de85517b294d75f2895c177" kindref="member">SUPERBLOCK_VALID</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a6a0f3511801d7c3e533aa89b790d3a6f" kindref="member">isearch</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a4054b5f51f01fa8ce3e5aae124b8d45c" kindref="member">zsearch</ref><sp/>=<sp/>d_sb-&gt;<ref refid="structd__superblock_1a4cf84c0911631c9f5063a53e33b09877" kindref="member">s_first_data_block</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a6e44a17eef6d95b2e6832c26e469d505" kindref="member">chain</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structsuperblock_1a6a9e89d63eb610dfe238b0a840979421" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>blkunlock(buf);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sb);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal">error1:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>brelse(buf);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1gaa1e437c51f1035512ba17835840934e5" kindref="member">superblock_unlock</ref>(sb);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">error0:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(NULL);</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Superblock_1ga11746988cc13e340fe34981d65fe6078" kindref="member">superblock_sync</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>superblocks<sp/>to<sp/>disk.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sb<sp/>=<sp/>&amp;superblocks[0];<sp/>sb<sp/>&lt;<sp/>&amp;superblocks[NR_SUPERBLOCKS];<sp/>sb++)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1ga4ef02b583308d00506b5000837010523" kindref="member">superblock_lock</ref>(sb);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>only<sp/>valid<sp/>superblocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structsuperblock_1a8eea88528a75f696f8ca2c7672fbc0c2" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47ba4448f5ef0de85517b294d75f2895c177" kindref="member">SUPERBLOCK_VALID</ref>)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1gadb4f935903bd5f08132801b1a908b043" kindref="member">superblock_write</ref>(sb);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1gaa1e437c51f1035512ba17835840934e5" kindref="member">superblock_unlock</ref>(sb);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Superblock_1gaad74db1f397342f785ea20b10c745b2e" kindref="member">superblock_stat</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsuperblock" kindref="compound">superblock</ref><sp/>*sb,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ustat<sp/>*ubuf)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tfree;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Total<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tinode;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Total<sp/>free<sp/>inodes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bmap_size;<sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>block<sp/>map.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imap_size;<sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>inode<sp/>map.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>number<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>tfree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>bmap_size<sp/>=<sp/>sb-&gt;<ref refid="structsuperblock_1abb42d1cb8207c76e12f36d7f933847b7" kindref="member">zmap_blocks</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bmap_size;<sp/>i++)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(BLOCK_SIZE<sp/>&gt;&gt;<sp/>2);<sp/>j++)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tfree<sp/>+=<sp/><ref refid="klib_8h_1acf93fb1df199ba81a760bd836a0733e0" kindref="member">bitmap_nclear</ref>(sb-&gt;<ref refid="structsuperblock_1ab5eff66b558c0b780d2aa1f7fc4b7b47" kindref="member">zmap</ref>[i]-&gt;<ref refid="structbuffer_1a735984d41155bc1032e09bece8f8d66d" kindref="member">data</ref>,<sp/>BLOCK_SIZE);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>number<sp/>of<sp/>free<sp/>inodes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>tinode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>imap_size<sp/>=<sp/>sb-&gt;<ref refid="structsuperblock_1abb42d1cb8207c76e12f36d7f933847b7" kindref="member">zmap_blocks</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>imap_size;<sp/>i++)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(BLOCK_SIZE<sp/>&gt;&gt;<sp/>2);<sp/>j++)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinode<sp/>+=<sp/><ref refid="klib_8h_1acf93fb1df199ba81a760bd836a0733e0" kindref="member">bitmap_nclear</ref>(sb-&gt;<ref refid="structsuperblock_1a2913dc8576a928e424368ac0e3643db3" kindref="member">imap</ref>[i]-&gt;<ref refid="structbuffer_1a735984d41155bc1032e09bece8f8d66d" kindref="member">data</ref>,<sp/>BLOCK_SIZE);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>ubuf-&gt;f_tfree<sp/>=<sp/>tfree;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>ubuf-&gt;f_tinode<sp/>=<sp/>tinode;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>ubuf-&gt;f_fname[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>ubuf-&gt;f_fpack[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Superblock_1ga226f283e88ec0b9f2d85a60ae83a4fb9" kindref="member">superblock_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>superblocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NR_SUPERBLOCKS;<sp/>i++)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>superblocks[i].count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>superblocks[i].flags<sp/>=<sp/>~(<ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47ba4448f5ef0de85517b294d75f2895c177" kindref="member">SUPERBLOCK_VALID</ref><sp/>|<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bafbb91ce9ba0ed958e3a1f915e0e5f69c" kindref="member">SUPERBLOCK_LOCKED</ref><sp/>|<sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47bac3e4f8bf48565fc230656ff10457a5fa" kindref="member">SUPERBLOCK_DIRTY</ref><sp/>|<sp/><ref refid="group__Superblock_1gga7bb5bede8fcda9ee9438bbc55cafc47ba4ae9160bb98725e2aee4238ffe530345" kindref="member">SUPERBLOCK_RDONLY</ref>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1aaa663a13f0d3c7289b139360848772c0" kindref="member">kprintf</ref>(</highlight><highlight class="stringliteral">&quot;fs:<sp/>superblock<sp/>table<sp/>has<sp/>%d<sp/>entries&quot;</highlight><highlight class="normal">,<sp/>NR_SUPERBLOCKS);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/kernel/fs/super.c"/>
  </compounddef>
</doxygen>
