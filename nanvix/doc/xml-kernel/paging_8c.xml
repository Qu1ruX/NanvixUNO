<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="paging_8c" kind="file" language="C++">
    <compoundname>paging.c</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="paging_8c_1a4fe042b5f055508d8403e47b676649b1" prot="public" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned count</definition>
        <argsstring>[SWP_SIZE/PAGE_SIZE]</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference count. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="71" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="paging_8c_1a736771d7c5669da00ecfd6620a17d96e" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t bitmap[(SWP_SIZE/PAGE_SIZE) &gt;&gt; 5]</definition>
        <argsstring>[(SWP_SIZE/PAGE_SIZE) &gt;&gt; 5]</argsstring>
        <name>bitmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitmap. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="72" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="paging_8c_1aab7799c27f3b8ea5c99219603f601d90" prot="public" static="no" mutable="no">
        <type>PRIVATE struct @9</type>
        <definition>PRIVATE struct @9  swap</definition>
        <argsstring></argsstring>
        <name>swap</name>
        <briefdescription>
<para>Swap space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="73" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="paging_8c_1a9a24092db5a4753e89e7373e5d67da72" prot="public" static="no" mutable="no">
        <type>PRIVATE int</type>
        <definition>PRIVATE int kpages[NR_KPAGES]</definition>
        <argsstring>[NR_KPAGES]</argsstring>
        <name>kpages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="210" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="paging_8c_1aa37a5c180ef27874567594d1e1039089" prot="public" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned age</definition>
        <argsstring></argsstring>
        <name>age</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Age. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="282" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="paging_8c_1a5998d3fb8a5a18a610765210804a900b" prot="public" static="no" mutable="no">
        <type>pid_t</type>
        <definition>pid_t owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Page owner. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="283" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="paging_8c_1a30427669daebce380590ca46efbaf79c" prot="public" static="no" mutable="no">
        <type>addr_t</type>
        <definition>addr_t addr</definition>
        <argsstring></argsstring>
        <name>addr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Address of the page. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="284" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="paging_8c_1a50918e797b66cfd2ba31433b66dd806b" prot="public" static="no" mutable="no">
        <type>PRIVATE struct @10</type>
        <definition>PRIVATE struct @10  frames[NR_FRAMES]</definition>
        <argsstring>[NR_FRAMES]</argsstring>
        <name>frames</name>
        <briefdescription>
<para>Page frames. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="285" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="paging_8c_1a73c29af24b4b5f4977ef145ab44750ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE void</type>
        <definition>PRIVATE void swap_clear</definition>
        <argsstring>(struct pte *pg)</argsstring>
        <name>swap_clear</name>
        <param>
          <type>struct pte *</type>
          <declname>pg</declname>
        </param>
        <briefdescription>
<para>Clears the swap space that is associated to a page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pg</parametername>
</parameternamelist>
<parameterdescription>
<para>Page to be inspected. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="80" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="80" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1ab795b5674f262268b71d626f371fcef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE int</type>
        <definition>PRIVATE int swap_out</definition>
        <argsstring>(struct process *proc, addr_t addr)</argsstring>
        <name>swap_out</name>
        <param>
          <type>struct <ref refid="structprocess" kindref="compound">process</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>addr_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Swaps a page out to disk. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process where the page is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the page to be swapped out.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero upon success, and non-zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="102" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="102" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1adb20e38fe5c4230281dae94dcb601f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE int</type>
        <definition>PRIVATE int swap_in</definition>
        <argsstring>(unsigned frame, addr_t addr)</argsstring>
        <name>swap_in</name>
        <param>
          <type>unsigned</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>addr_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Swaps a page in to disk. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame number where the page should be placed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the page to be swapped in.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero upon success, and non-zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="160" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="160" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a5a2ea2aee07f8e5af1aa6edf53c227be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void *</type>
        <definition>PUBLIC void* getkpg</definition>
        <argsstring>(int clean)</argsstring>
        <name>getkpg</name>
        <param>
          <type>int</type>
          <declname>clean</declname>
        </param>
        <briefdescription>
<para>Allocates a kernel page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clean</parametername>
</parameternamelist>
<parameterdescription>
<para>Should the page be cleaned?</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon success, a pointer to a page is returned. Upon failure, a NULL pointer is returned instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="220" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="220" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1aefb4f6d5db06b348755956a647e3645b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void putkpg</definition>
        <argsstring>(void *kpg)</argsstring>
        <name>putkpg</name>
        <param>
          <type>void *</type>
          <declname>kpg</declname>
        </param>
        <briefdescription>
<para>Releases kernel page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kpg</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel page to be released. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="255" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="255" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a16034c40ac9e2d171712bdae495f5300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE int</type>
        <definition>PRIVATE int allocf</definition>
        <argsstring>(void)</argsstring>
        <name>allocf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocates a page frame. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Upon success, the number of the frame is returned. Upon failure, a negative number is returned instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="293" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="293" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a769e983641772c58a33891d88b1d88cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE int</type>
        <definition>PRIVATE int cpypg</definition>
        <argsstring>(struct pte *pg1, struct pte *pg2)</argsstring>
        <name>cpypg</name>
        <param>
          <type>struct pte *</type>
          <declname>pg1</declname>
        </param>
        <param>
          <type>struct pte *</type>
          <declname>pg2</declname>
        </param>
        <briefdescription>
<para>Copies a page. </para>        </briefdescription>
        <detaileddescription>
<para>pg1 Target page. pg2 Source page.</para><para><simplesect kind="return"><para>Zero upon successful completion, and non-zero otherwise.</para></simplesect>
<simplesect kind="note"><para>The source page is assumed to be in-core. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="347" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="347" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a9e8ea3ef41e94ea9dfe462cde19df618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE int</type>
        <definition>PRIVATE int allocupg</definition>
        <argsstring>(addr_t addr, int writable)</argsstring>
        <name>allocupg</name>
        <param>
          <type>addr_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>writable</declname>
        </param>
        <briefdescription>
<para>Allocates a user page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address where the page resides. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writable</parametername>
</parameternamelist>
<parameterdescription>
<para>Is the page writable?</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero upon successful completion, and non-zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="375" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="375" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a23b5b57d80d3534e28233a3374ae5dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRIVATE int</type>
        <definition>PRIVATE int readpg</definition>
        <argsstring>(struct region *reg, addr_t addr)</argsstring>
        <name>readpg</name>
        <param>
          <type>struct region *</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>addr_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Reads a page from a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Region where the page resides. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address where the page should be loaded.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero upon successful completion, and non-zero upon failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="408" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="408" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a46380d47ca858d195abe0ab78ade94a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void mappgtab</definition>
        <argsstring>(struct process *proc, addr_t addr, void *pgtab)</argsstring>
        <name>mappgtab</name>
        <param>
          <type>struct <ref refid="structprocess" kindref="compound">process</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>addr_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pgtab</declname>
        </param>
        <briefdescription>
<para>Maps a page table into user address space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process in which the page table should be mapped. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address where the page should be mapped. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgtab</parametername>
</parameternamelist>
<parameterdescription>
<para>Page table to map. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="452" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="452" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a1b96caccdd3db7f9d31f87bf1db3dc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void umappgtab</definition>
        <argsstring>(struct process *proc, addr_t addr)</argsstring>
        <name>umappgtab</name>
        <param>
          <type>struct <ref refid="structprocess" kindref="compound">process</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>addr_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Unmaps a page table from user address space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process in which the page table should be unmapped. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address where the page should be unmapped.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero upon success, and non zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="481" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="481" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1ae66e72ac787ee8fdaffd48ca5f8a412e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void freeupg</definition>
        <argsstring>(struct pte *pg)</argsstring>
        <name>freeupg</name>
        <param>
          <type>struct pte *</type>
          <declname>pg</declname>
        </param>
        <briefdescription>
<para>Frees a user page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pg</parametername>
</parameternamelist>
<parameterdescription>
<para>Page to be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="504" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="504" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1ae1274e1b7f0875dd93517f4ddc9d4b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void markpg</definition>
        <argsstring>(struct pte *pg, int mark)</argsstring>
        <name>markpg</name>
        <param>
          <type>struct pte *</type>
          <declname>pg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mark</declname>
        </param>
        <briefdescription>
<para>Marks a page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pg</parametername>
</parameternamelist>
<parameterdescription>
<para>Page to be marked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mark</parametername>
</parameternamelist>
<parameterdescription>
<para>Mark. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="535" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="535" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1aa6b468159e0b02cb42b83f74722bbb4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void linkupg</definition>
        <argsstring>(struct pte *upg1, struct pte *upg2)</argsstring>
        <name>linkupg</name>
        <param>
          <type>struct pte *</type>
          <declname>upg1</declname>
        </param>
        <param>
          <type>struct pte *</type>
          <declname>upg2</declname>
        </param>
        <briefdescription>
<para>Links two pages. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>upg1</parametername>
</parameternamelist>
<parameterdescription>
<para>Source page. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Target page. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="564" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="564" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a55dedd49f94d17ba5274063ba454afea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC int</type>
        <definition>PUBLIC int crtpgdir</definition>
        <argsstring>(struct process *proc)</argsstring>
        <name>crtpgdir</name>
        <param>
          <type>struct <ref refid="structprocess" kindref="compound">process</ref> *</type>
          <declname>proc</declname>
        </param>
        <briefdescription>
<para>Creates a page directory for a process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Target process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion, zero is returned. Upon failure, non-zero is returned instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="600" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="600" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1ac9cc8f591f903a5a8b07331328c6c134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC void</type>
        <definition>PUBLIC void dstrypgdir</definition>
        <argsstring>(struct process *proc)</argsstring>
        <name>dstrypgdir</name>
        <param>
          <type>struct <ref refid="structprocess" kindref="compound">process</ref> *</type>
          <declname>proc</declname>
        </param>
        <briefdescription>
<para>Destroys the page directory of a process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Target process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The current running process may not be the target process. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="653" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="653" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1a747b372d313c2997e936ba7a623f9980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC int</type>
        <definition>PUBLIC int vfault</definition>
        <argsstring>(addr_t addr)</argsstring>
        <name>vfault</name>
        <param>
          <type>addr_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Handles a validity page fault. </para>        </briefdescription>
        <detaileddescription>
<para>addr Faulting address.</para><para><simplesect kind="return"><para>Upon successful completion, zero is returned. Upon failure, non-zero is returned instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="667" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="667" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="paging_8c_1ac136ff0f7f1b95005a3a79d29e85174e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC int</type>
        <definition>PUBLIC int pfault</definition>
        <argsstring>(addr_t addr)</argsstring>
        <name>pfault</name>
        <param>
          <type>addr_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Handles a protection page fault. </para>        </briefdescription>
        <detaileddescription>
<para>addr Faulting address.</para><para><simplesect kind="return"><para>Upon successful completion, zero is returned. Upon failure, non-zero is returned instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/mm/paging.c" line="743" column="1" bodyfile="src/kernel/mm/paging.c" bodystart="743" bodyend="797"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright(C)<sp/>2011-2016<sp/>Pedro<sp/>H.<sp/>Penna<sp/>&lt;pedrohenriquepenna@gmail.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Nanvix.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>Nanvix.<sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nanvix/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="const_8h" kindref="compound">nanvix/const.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nanvix/clock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nanvix/dev.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2nanvix_2fs_8h" kindref="compound">nanvix/fs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hal_8h" kindref="compound">nanvix/hal.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="klib_8h" kindref="compound">nanvix/klib.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nanvix/mm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nanvix/region.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Swapping<sp/>area<sp/>too<sp/>small?</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(SWP_SIZE<sp/>&lt;<sp/>MEMORY_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>&quot;swapping<sp/>area<sp/>to<sp/>small&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor">#define<sp/>getpde(p,<sp/>a)<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(&amp;(p)-&gt;pgdir[PGTAB(a)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor">#define<sp/>getpte(p,<sp/>a)<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(&amp;((struct<sp/>pte<sp/>*)((getpde(p,<sp/>a)-&gt;frame<sp/>&lt;&lt;<sp/>PAGE_SHIFT)<sp/>+<sp/>KBASE_VIRT))[PG(a)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*============================================================================*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Swapping<sp/>System<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*============================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>count[SWP_SIZE/PAGE_SIZE];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bitmap[(SWP_SIZE/PAGE_SIZE)<sp/>&gt;&gt;<sp/>5];<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/>swap<sp/>=<sp/>{{0,<sp/>},<sp/>{0,<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap_clear(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*pg)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pg-&gt;frame;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>swap<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap.count[i]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitmap_clear(swap.bitmap,<sp/>i);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap.count[i]--;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swap_out(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structprocess" kindref="compound">process</ref><sp/>*proc,<sp/>addr_t<sp/>addr)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>blk;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>number<sp/>in<sp/>swap<sp/>device.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pte<sp/>*pg;<sp/></highlight><highlight class="comment">/*<sp/>Page<sp/>table<sp/>entry.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>off_t<sp/>off;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Offset<sp/>in<sp/>swap<sp/>device.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#<sp/>bytes<sp/>written.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*kpg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Kernel<sp/>page<sp/>used<sp/>for<sp/>copying.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>addr<sp/>&amp;=<sp/>PAGE_MASK;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>pg<sp/>=<sp/>getpte(proc,<sp/>addr);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>kernel<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((kpg<sp/>=<sp/>getkpg(0))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>free<sp/>block<sp/>in<sp/>swap<sp/>device.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>blk<sp/>=<sp/><ref refid="klib_8h_1a2b64976de3a1868972fcd49fca351777" kindref="member">bitmap_first_free</ref>(swap.bitmap,<sp/>(SWP_SIZE/PAGE_SIZE)<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk<sp/>==<sp/>BITMAP_FULL)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>block<sp/>on<sp/>swap<sp/>device<sp/>as<sp/>used</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>advance,<sp/>because<sp/>we<sp/>may<sp/>sleep<sp/>below.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>off<sp/>=<sp/>HDD_SIZE<sp/>+<sp/>blk*PAGE_SIZE;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap_set(swap.bitmap,<sp/>blk);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>page<sp/>to<sp/>disk.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1afb452e399304dfd9e788dd888fc5e4de" kindref="member">kmemcpy</ref>(kpg,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)addr,<sp/>PAGE_SIZE);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>bdev_write(SWAP_DEV,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)addr,<sp/>PAGE_SIZE,<sp/>off);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>PAGE_SIZE)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error2;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>swap.count[blk]++;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>page<sp/>as<sp/>non-present.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;present<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;frame<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>tlb_flush();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>putkpg(kpg);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">error2:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap_clear(swap.bitmap,<sp/>blk);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">error1:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>putkpg(kpg);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">error0:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swap_in(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>frame,<sp/>addr_t<sp/>addr)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>blk;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>number<sp/>in<sp/>swap<sp/>device.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pte<sp/>*pg;<sp/></highlight><highlight class="comment">/*<sp/>Page<sp/>table<sp/>entry.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>off_t<sp/>off;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Offset<sp/>in<sp/>swap<sp/>device.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#<sp/>bytes<sp/>read.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*kpg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Kernel<sp/>page<sp/>used<sp/>for<sp/>copying.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>addr<sp/>&amp;=<sp/>PAGE_MASK;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>pg<sp/>=<sp/>getpte(curr_proc,<sp/>addr);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>kernel<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((kpg<sp/>=<sp/>getkpg(0))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>block<sp/>#<sp/>in<sp/>swap<sp/>device.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>pg-&gt;frame;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>off<sp/>=<sp/>HDD_SIZE<sp/>+<sp/>blk*PAGE_SIZE;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>page<sp/>from<sp/>disk.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>bdev_read(SWAP_DEV,<sp/>kpg,<sp/>PAGE_SIZE,<sp/>off);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>PAGE_SIZE)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>swap_clear(pg);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>page<sp/>as<sp/>present.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;present<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;frame<sp/>=<sp/>(UBASE_PHYS<sp/>&gt;&gt;<sp/>PAGE_SHIFT)<sp/>+<sp/>frame;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>tlb_flush();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1afb452e399304dfd9e788dd888fc5e4de" kindref="member">kmemcpy</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)addr,<sp/>kpg,<sp/>PAGE_SIZE);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;accessed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;dirty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>putkpg(kpg);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">error1:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>putkpg(kpg);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">error0:</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">/*============================================================================*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kernel<sp/>Page<sp/>Pool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*============================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Kernel<sp/>pages.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NR_KPAGES<sp/>(KPOOL_SIZE/PAGE_SIZE)<sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>kernel<sp/>pages.<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kpages[NR_KPAGES]<sp/>=<sp/>{<sp/>0,<sp/><sp/>};<sp/></highlight><highlight class="comment">/*<sp/>Reference<sp/>count.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*getkpg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clean)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;<sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>index.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*kpg;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Kernel<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>for<sp/>a<sp/>free<sp/>kernel<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NR_KPAGES;<sp/>i++)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Found<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kpages[i]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1aaa663a13f0d3c7289b139360848772c0" kindref="member">kprintf</ref>(</highlight><highlight class="stringliteral">&quot;mm:<sp/>kernel<sp/>page<sp/>pool<sp/>overflow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(NULL);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">found:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>page<sp/>as<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>kpg<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(KPOOL_VIRT<sp/>+<sp/>(i<sp/>&lt;&lt;<sp/>PAGE_SHIFT));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>kpages[i]++;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clean<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clean)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" kindref="member">kmemset</ref>(kpg,<sp/>0,<sp/>PAGE_SIZE);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(kpg);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>putkpg(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*kpg)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>((addr_t)kpg<sp/>-<sp/>KPOOL_VIRT)<sp/>&gt;&gt;<sp/>PAGE_SHIFT;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>kpages[i]--;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Double<sp/>free.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kpages[i]<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1a04d9437f531c5286968b3fd38bb990cd" kindref="member">kpanic</ref>(</highlight><highlight class="stringliteral">&quot;mm:<sp/>releasing<sp/>kernel<sp/>page<sp/>twice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">/*============================================================================*</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Paging<sp/>System<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*============================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>page<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NR_FRAMES<sp/>(UMEM_SIZE/PAGE_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>count;<sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>age;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>pid_t<sp/>owner;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>addr_t<sp/>addr;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal">}<sp/>frames[NR_FRAMES]<sp/>=<sp/>{{0,<sp/>0,<sp/>0,<sp/>0},<sp/><sp/>};</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allocf(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>index.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldest;<sp/></highlight><highlight class="comment">/*<sp/>Oldest<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>OLDEST(x,<sp/>y)<sp/>(frames[x].age<sp/>&lt;<sp/>frames[y].age)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>for<sp/>a<sp/>free<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>oldest<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NR_FRAMES;<sp/>i++)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Found<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frames[i].count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Local<sp/>page<sp/>replacement<sp/>policy.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frames[i].owner<sp/>==<sp/>curr_proc-&gt;<ref refid="structprocess_1ae0d46a978d5cd6707411f276ad869b9c" kindref="member">pid</ref>)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>shared<sp/>pages.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frames[i].count<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Oldest<sp/>page<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((oldest<sp/>&lt;<sp/>0)<sp/>||<sp/>(OLDEST(i,<sp/>oldest)))</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldest<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>frame<sp/>left.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldest<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swap<sp/>page<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap_out(curr_proc,<sp/>frames[i<sp/>=<sp/>oldest].addr))</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal">found:<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>frames[i].age<sp/>=<sp/>ticks;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>frames[i].count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpypg(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*pg1,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*pg2)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>new<sp/>user<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>allocf())<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handcraft<sp/>page<sp/>table<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>pg1-&gt;present<sp/>=<sp/>pg2-&gt;present;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>pg1-&gt;writable<sp/>=<sp/>pg2-&gt;writable;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>pg1-&gt;user<sp/>=<sp/>pg2-&gt;user;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>pg1-&gt;cow<sp/>=<sp/>pg2-&gt;cow;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>pg1-&gt;frame<sp/>=<sp/>(UBASE_PHYS<sp/>&gt;&gt;<sp/>PAGE_SHIFT)<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>physcpy(pg1-&gt;frame<sp/>&lt;&lt;<sp/>PAGE_SHIFT,<sp/>pg2-&gt;frame<sp/>&lt;&lt;<sp/>PAGE_SHIFT,<sp/>PAGE_SIZE);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allocupg(addr_t<sp/>addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>writable)</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Page<sp/>frame<sp/>index.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pte<sp/>*pg;<sp/></highlight><highlight class="comment">/*<sp/>Working<sp/>page<sp/>table<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Failed<sp/>to<sp/>allocate<sp/>page<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>allocf())<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>page<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>frames[i].owner<sp/>=<sp/>curr_proc-&gt;<ref refid="structprocess_1ae0d46a978d5cd6707411f276ad869b9c" kindref="member">pid</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>frames[i].addr<sp/>=<sp/>addr<sp/>&amp;<sp/>PAGE_MASK;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>pg<sp/>=<sp/>getpte(curr_proc,<sp/>addr);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" kindref="member">kmemset</ref>(pg,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;present<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;writable<sp/>=<sp/>(writable)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;user<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;frame<sp/>=<sp/>(UBASE_PHYS<sp/>&gt;&gt;<sp/>PAGE_SHIFT)<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>tlb_flush();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">PRIVATE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readpg(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>region<sp/>*reg,<sp/>addr_t<sp/>addr)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>pointer.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>off_t<sp/>off;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>offset.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bytes<sp/>read.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinode" kindref="compound">inode</ref><sp/>*<ref refid="structinode" kindref="compound">inode</ref>;<sp/></highlight><highlight class="comment">/*<sp/>File<sp/>inode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pte<sp/>*pg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Working<sp/>page<sp/>table<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>addr<sp/>&amp;=<sp/>PAGE_MASK;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assign<sp/>a<sp/>user<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocupg(addr,<sp/>reg-&gt;mode<sp/>&amp;<sp/>MAY_WRITE))</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>page<sp/>table<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>pg<sp/>=<sp/>getpte(curr_proc,<sp/>addr);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>off<sp/>=<sp/>reg-&gt;file.off<sp/>+<sp/>(PG(addr)<sp/>&lt;&lt;<sp/>PAGE_SHIFT);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>inode<sp/>=<sp/>reg-&gt;file.inode;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(addr<sp/>&amp;<sp/>PAGE_MASK);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>file_read(inode,<sp/>p,<sp/>PAGE_SIZE,<sp/>off);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Failed<sp/>to<sp/>read<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeupg(pg);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>remainder<sp/>bytes<sp/>with<sp/>zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>PAGE_SIZE)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" kindref="member">kmemset</ref>(p<sp/>+<sp/>count,<sp/>0,<sp/>PAGE_SIZE<sp/>-<sp/>count);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mappgtab(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structprocess" kindref="compound">process</ref><sp/>*proc,<sp/>addr_t<sp/>addr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pgtab)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pde<sp/>*pde;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>pde<sp/>=<sp/>&amp;proc-&gt;<ref refid="structprocess_1aa5ea898e74ff98225e7ccc402cde4ad6" kindref="member">pgdir</ref>[PGTAB(addr)];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bad<sp/>page<sp/>table.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pde-&gt;present)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1a04d9437f531c5286968b3fd38bb990cd" kindref="member">kpanic</ref>(</highlight><highlight class="stringliteral">&quot;busy<sp/>page<sp/>table<sp/>entry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Map<sp/>kernel<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>pde-&gt;present<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>pde-&gt;writable<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>pde-&gt;user<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>pde-&gt;frame<sp/>=<sp/>(ADDR(pgtab)<sp/>-<sp/>KBASE_VIRT)<sp/>&gt;&gt;<sp/>PAGE_SHIFT;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>changes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proc<sp/>==<sp/>curr_proc)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tlb_flush();</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>umappgtab(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structprocess" kindref="compound">process</ref><sp/>*proc,<sp/>addr_t<sp/>addr)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pde<sp/>*pde;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>pde<sp/>=<sp/>&amp;proc-&gt;<ref refid="structprocess_1aa5ea898e74ff98225e7ccc402cde4ad6" kindref="member">pgdir</ref>[PGTAB(addr)];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bad<sp/>page<sp/>table.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pde-&gt;present))</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1a04d9437f531c5286968b3fd38bb990cd" kindref="member">kpanic</ref>(</highlight><highlight class="stringliteral">&quot;unmap<sp/>non-present<sp/>page<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unmap<sp/>kernel<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" kindref="member">kmemset</ref>(pde,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pde));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>changes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proc<sp/>==<sp/>curr_proc)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tlb_flush();</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeupg(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*pg)</highlight></codeline>
<codeline lineno="505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In-disk<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pg-&gt;present)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_clear(pg);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" kindref="member">kmemset</ref>(pg,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pg-&gt;frame<sp/>-<sp/>(UBASE_PHYS<sp/>&gt;&gt;<sp/>PAGE_SHIFT);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Double<sp/>free.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frames[i].count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1a04d9437f531c5286968b3fd38bb990cd" kindref="member">kpanic</ref>(</highlight><highlight class="stringliteral">&quot;freeing<sp/>user<sp/>page<sp/>twice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>user<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--frames[i].count)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frames[i].owner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" kindref="member">kmemset</ref>(pg,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>tlb_flush();</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markpg(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*pg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mark)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bad<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pg-&gt;present)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1a04d9437f531c5286968b3fd38bb990cd" kindref="member">kpanic</ref>(</highlight><highlight class="stringliteral">&quot;demand<sp/>fill<sp/>on<sp/>a<sp/>present<sp/>page&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mark)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Demand<sp/>fill.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PAGE_FILL:</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg-&gt;fill<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg-&gt;zero<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Demand<sp/>zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PAGE_ZERO:</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg-&gt;fill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg-&gt;zero<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linkupg(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*upg1,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte<sp/>*upg2)</highlight></codeline>
<codeline lineno="565"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In-core<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upg1-&gt;present)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>copy<sp/>on<sp/>write.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upg1-&gt;writable)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upg1-&gt;writable<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upg1-&gt;cow<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>upg1-&gt;frame<sp/>-<sp/>(UBASE_PHYS<sp/>&gt;&gt;<sp/>PAGE_SHIFT);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frames[i].count++;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In-disk<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>upg1-&gt;frame;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap.count[i]++;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1afb452e399304dfd9e788dd888fc5e4de" kindref="member">kmemcpy</ref>(upg2,<sp/>upg1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte));</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crtpgdir(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structprocess" kindref="compound">process</ref><sp/>*proc)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*kstack;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Kernel<sp/>stack.<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pde<sp/>*pgdir;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Page<sp/>directory.<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">intstack<sp/>*s1,<sp/>*s2;<sp/></highlight><highlight class="comment">/*<sp/>Interrupt<sp/>stacks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>kernel<sp/>page<sp/>for<sp/>page<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>pgdir<sp/>=<sp/>getkpg(1);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pgdir<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>kernel<sp/>page<sp/>for<sp/>kernel<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>kstack<sp/>=<sp/>getkpg(0);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kstack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>page<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>pgdir[0]<sp/>=<sp/>curr_proc-&gt;<ref refid="structprocess_1aa5ea898e74ff98225e7ccc402cde4ad6" kindref="member">pgdir</ref>[0];</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>pgdir[PGTAB(KBASE_VIRT)]<sp/>=<sp/>curr_proc-&gt;<ref refid="structprocess_1aa5ea898e74ff98225e7ccc402cde4ad6" kindref="member">pgdir</ref>[PGTAB(KBASE_VIRT)];</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>pgdir[PGTAB(KPOOL_VIRT)]<sp/>=<sp/>curr_proc-&gt;<ref refid="structprocess_1aa5ea898e74ff98225e7ccc402cde4ad6" kindref="member">pgdir</ref>[PGTAB(KPOOL_VIRT)];</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>pgdir[PGTAB(INITRD_VIRT)]<sp/>=<sp/>curr_proc-&gt;<ref refid="structprocess_1aa5ea898e74ff98225e7ccc402cde4ad6" kindref="member">pgdir</ref>[PGTAB(INITRD_VIRT)];</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clone<sp/>kernel<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="klib_8h_1afb452e399304dfd9e788dd888fc5e4de" kindref="member">kmemcpy</ref>(kstack,<sp/>curr_proc-&gt;<ref refid="structprocess_1a8ed13989c52fbc1c67072c171147279b" kindref="member">kstack</ref>,<sp/>KSTACK_SIZE);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adjust<sp/>stack<sp/>pointers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>proc-&gt;<ref refid="structprocess_1a16578b20734d6dd24a1d27ea8afe296e" kindref="member">kesp</ref><sp/>=<sp/>(curr_proc-&gt;<ref refid="structprocess_1a16578b20734d6dd24a1d27ea8afe296e" kindref="member">kesp</ref><sp/>-(dword_t)curr_proc-&gt;<ref refid="structprocess_1a8ed13989c52fbc1c67072c171147279b" kindref="member">kstack</ref>)+(dword_t)kstack;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr_proc<sp/>==<sp/>IDLE)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">intstack<sp/>*)<sp/>curr_proc-&gt;<ref refid="structprocess_1a16578b20734d6dd24a1d27ea8afe296e" kindref="member">kesp</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>intstack<sp/>*)<sp/>proc-&gt;<ref refid="structprocess_1a16578b20734d6dd24a1d27ea8afe296e" kindref="member">kesp</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2-&gt;ebp<sp/>=<sp/>(s1-&gt;ebp<sp/>-<sp/>(dword_t)curr_proc-&gt;<ref refid="structprocess_1a8ed13989c52fbc1c67072c171147279b" kindref="member">kstack</ref>)<sp/>+<sp/>(dword_t)kstack;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assign<sp/>page<sp/>directory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>proc-&gt;<ref refid="structprocess_1a7d77331196a99ad23686fd0b78987d52" kindref="member">cr3</ref><sp/>=<sp/>ADDR(pgdir)<sp/>-<sp/>KBASE_VIRT;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>proc-&gt;<ref refid="structprocess_1aa5ea898e74ff98225e7ccc402cde4ad6" kindref="member">pgdir</ref><sp/>=<sp/>pgdir;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>proc-&gt;<ref refid="structprocess_1a8ed13989c52fbc1c67072c171147279b" kindref="member">kstack</ref><sp/>=<sp/>kstack;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal">err1:</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>putkpg(pgdir);</highlight></codeline>
<codeline lineno="642"><highlight class="normal">err0:</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dstrypgdir(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structprocess" kindref="compound">process</ref><sp/>*proc)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>putkpg(proc-&gt;<ref refid="structprocess_1a8ed13989c52fbc1c67072c171147279b" kindref="member">kstack</ref>);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>putkpg(proc-&gt;<ref refid="structprocess_1aa5ea898e74ff98225e7ccc402cde4ad6" kindref="member">pgdir</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vfault(addr_t<sp/>addr)</highlight></codeline>
<codeline lineno="668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Frame<sp/>index<sp/>of<sp/>page<sp/>to<sp/>be<sp/>swapped<sp/>in.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pte<sp/>*pg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Working<sp/>page.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">region<sp/>*reg;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Working<sp/>region.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pregion<sp/>*preg;<sp/></highlight><highlight class="comment">/*<sp/>Working<sp/>process<sp/>region.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>associated<sp/>region.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>preg<sp/>=<sp/>findreg(curr_proc,<sp/>addr);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preg<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error0;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>lockreg(reg<sp/>=<sp/>preg-&gt;reg);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Outside<sp/>virtual<sp/>address<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!withinreg(preg,<sp/>addr))</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>a<sp/>stack<sp/>region.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preg<sp/>!=<sp/>STACK(curr_proc))</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1aaa663a13f0d3c7289b139360848772c0" kindref="member">kprintf</ref>(</highlight><highlight class="stringliteral">&quot;growing<sp/>stack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Expand<sp/>region.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(growreg(curr_proc,preg,(preg-&gt;start-reg-&gt;size)-(addr&amp;~PGTAB_MASK)))</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>pg<sp/>=<sp/>(reg-&gt;flags<sp/>&amp;<sp/>REGION_DOWNWARDS)<sp/>?</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;reg-&gt;pgtab[REGION_PGTABS-(PGTAB(preg-&gt;start)-PGTAB(addr))-1][PG(addr)]:<sp/></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;reg-&gt;pgtab[PGTAB(addr)<sp/>-<sp/>PGTAB(preg-&gt;start)][PG(addr)];</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pg-&gt;zero)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocupg(addr,<sp/>reg-&gt;mode<sp/>&amp;<sp/>MAY_WRITE))</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1ae6bf8618de6d4d1db0616bff40622859" kindref="member">kmemset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(addr<sp/>&amp;<sp/>PAGE_MASK),<sp/>0,<sp/>PAGE_SIZE);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>page<sp/>from<sp/>executable<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pg-&gt;fill)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(readpg(reg,<sp/>addr))</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swap<sp/>page<sp/>in.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((frame<sp/>=<sp/>allocf())<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap_in(frame,<sp/>addr))</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error2;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frames[frame].addr<sp/>=<sp/>addr<sp/>&amp;<sp/>PAGE_MASK;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockreg(reg);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal">error2:</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>frames[frame].count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">error1:</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockreg(reg);</highlight></codeline>
<codeline lineno="732"><highlight class="normal">error0:</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal">PUBLIC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pfault(addr_t<sp/>addr)</highlight></codeline>
<codeline lineno="744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Frame<sp/>index.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pte<sp/>*pg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Faulting<sp/>page.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pte<sp/>new_pg;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>New<sp/>page.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">region<sp/>*reg;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Working<sp/>memory<sp/>region.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pregion<sp/>*preg;<sp/></highlight><highlight class="comment">/*<sp/>Working<sp/>process<sp/>region.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>preg<sp/>=<sp/>findreg(curr_proc,<sp/>addr);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Outside<sp/>virtual<sp/>address<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((preg<sp/>==<sp/>NULL)<sp/>||<sp/>(!withinreg(preg,<sp/>addr)))</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error0;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>lockreg(reg<sp/>=<sp/>preg-&gt;reg);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>pg<sp/>=<sp/>(reg-&gt;flags<sp/>&amp;<sp/>REGION_DOWNWARDS)<sp/>?</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;reg-&gt;pgtab[REGION_PGTABS-(PGTAB(preg-&gt;start)-PGTAB(addr))-1][PG(addr)]:<sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;reg-&gt;pgtab[PGTAB(addr)<sp/>-<sp/>PGTAB(preg-&gt;start)][PG(addr)];</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>on<sp/>write<sp/>not<sp/>enabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pg-&gt;cow)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pg-&gt;frame<sp/>-<sp/>(UBASE_PHYS<sp/>&gt;&gt;<sp/>PAGE_SHIFT);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Duplicate<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frames[i].count<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cpypg(&amp;new_pg,<sp/>pg))</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error1;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_pg.cow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_pg.writable<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlik<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frames[i].count--;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="klib_8h_1afb452e399304dfd9e788dd888fc5e4de" kindref="member">kmemcpy</ref>(pg,<sp/>&amp;new_pg,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>pte));</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Steal<sp/>page.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg-&gt;cow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg-&gt;writable<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockreg(reg);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">error1:</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>unlockreg(reg);</highlight></codeline>
<codeline lineno="795"><highlight class="normal">error0:</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/kernel/mm/paging.c"/>
  </compounddef>
</doxygen>
